{
  "source": "tools-in-data-science-public\\web-automation-with-playwright.md",
  "type": "course",
  "text": "## Web Scraping with Playwright in Python\n\nScrape JavaScript\u2011heavy sites effortlessly with Playwright.\n\n[![\ud83e\udd16 Playwright: Advanced Web Scraping in Python (14 min)](https://i.ytimg.com/vi_webp/biFzRHk4xpY/sddefault.webp)](https://youtu.be/biFzRHk4xpY) ([youtube.com](https://www.youtube.com/watch?v=biFzRHk4xpY&utm_source=chatgpt.com))\n\nPlaywright offers:\n\n- **JavaScript rendering**: Executes page scripts so you scrape only after content appears. ([playwright.dev](https://playwright.dev/python/docs/intro))\n- **Headless & headed modes**: Run without UI or in a real browser for debugging. ([playwright.dev](https://playwright.dev/python/docs/intro))\n- **Auto\u2011waiting & retry**: Built\u2011in locators reduce flakiness. ([playwright.dev](https://playwright.dev/python/docs/locators))\n- **Multi\u2011browser support**: Chromium, Firefox, WebKit\u2014all from one API. ([playwright.dev](https://playwright.dev/python/docs/intro))\n\n### Example: Scraping a JS\u2011Rendered Site\n\nWe\u2019ll scrape [Quotes to Scrape (JS)](https://quotes.toscrape.com/js/)\u2014a site that loads quotes via JavaScript, so a simple `requests` call gets only an empty shell ([quotes.toscrape.com](https://quotes.toscrape.com/js/)). Playwright runs the scripts and gives us the real content:\n\n```python\n# /// script\n# dependencies = [\"playwright\"]\n# ///\n\nfrom playwright.sync_api import sync_playwright\n\ndef scrape_quotes():\n    with sync_playwright() as p:\n        # Channel can be \"chrome\", \"msedge\", \"chrome-beta\", \"msedge-beta\" or \"msedge-dev\".\n        browser = p.chromium.launch(headless=True, channel=\"chrome\")\n        page = browser.new_page()\n        page.goto(\"https://quotes.toscrape.com/js/\")\n        quotes = page.query_selector_all(\".quote\")\n        for q in quotes:\n            text = q.query_selector(\".text\").inner_text()\n            author = q.query_selector(\".author\").inner_text()\n            print(f\"{text} \u2014 {author}\")\n        browser.close()\n\nif __name__ == \"__main__\":\n    scrape_quotes()\n```\n\nSave as `scraper.py` and run:\n\n```bash\nuv run scraper.py\n```\n\nYou\u2019ll see each quote plus author printed\u2014fetched only after the JS executes.\n"
}