{
  "source": "tools-in-data-science-public\\crawling-cli.md",
  "type": "course",
  "text": "## Crawling with the CLI\n\nSince websites are a common source of data, we often download entire websites (crawling) and then process them offline.\n\nWeb crawling is essential in many data-driven scenarios:\n\n- **Data mining and analysis**: Gathering structured data from multiple pages for market research, competitive analysis, or academic research\n- **Content archiving**: Creating offline copies of websites for preservation or backup purposes\n- **SEO analysis**: Analyzing site structure, metadata, and content to improve search rankings\n- **Legal compliance**: Capturing website content for regulatory or compliance documentation\n- **Website migration**: Creating a complete copy before moving to a new platform or design\n- **Offline access**: Downloading educational resources, documentation, or reference materials for use without internet connection\n\nThe most commonly used tool for fetching websites is [`wget`](https://www.gnu.org/software/wget/). It is pre-installed in many UNIX distributions and easy to install.\n\n[![Scraping Websites using Wget (8 min)](https://i.ytimg.com/vi/pLfH5TZBGXo/sddefault.jpg)](https://youtu.be/pLfH5TZBGXo)\n\nTo crawl the [IIT Madras Data Science Program website](https://study.iitm.ac.in/ds/) for example, you could run:\n\n```bash\nwget \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/\n```\n\nHere's what each option does:\n\n- `--recursive`: Enables recursive downloading (following links)\n- `--level=3`: Limits recursion depth to 3 levels from the initial URL\n- `--no-parent`: Restricts crawling to only URLs below the initial directory\n- `--convert-links`: Converts all links in downloaded documents to work locally\n- `--adjust-extension`: Adds proper extensions to files (.html, .jpg, etc.) based on MIME types\n- `--compression=auto`: Automatically handles compressed content (gzip, deflate)\n- `--accept html,htm`: Only downloads files with these extensions\n- `--directory-prefix=./ds`: Saves all downloaded files to the specified directory\n\n[wget2](https://gitlab.com/gnuwget/wget2) is a better version of `wget` and supports HTTP2, parallel connections, and only updates modified sites. The syntax is (mostly) the same.\n\n```bash\nwget2 \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/\n```\n\nThere are popular free and open-source alternatives to Wget:\n\n### Wpull\n\n[Wpull](https://github.com/ArchiveTeam/wpull) is a wget\u2010compatible Python crawler that supports on-disk resumption, WARC output, and PhantomJS integration.\n\n```bash\nuvx wpull \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/\n```\n\n### HTTrack\n\n[HTTrack](https://www.httrack.com/html/fcguide.html) is dedicated website\u2010mirroring tool with rich filtering and link\u2010conversion options.\n\n```bash\nhttrack \"https://study.iitm.ac.in/ds/\" \\\n  -O \"./ds\" \\\n  \"+*.study.iitm.ac.in/ds/*\" \\\n  -r3\n```\n\n### Robots.txt\n\n`robots.txt` is a standard file found in a website's root directory that specifies which parts of the site should not be accessed by web crawlers. It's part of the Robots Exclusion Protocol, an ethical standard for web crawling.\n\n**Why it's important**:\n\n- **Server load protection**: Prevents excessive traffic that could overload servers\n- **Privacy protection**: Keeps sensitive or private content from being indexed\n- **Legal compliance**: Respects website owners' rights to control access to their content\n- **Ethical web citizenship**: Shows respect for website administrators' wishes\n\n**How to override robots.txt restrictions**:\n\n- **wget, wget2**: Use `-e robots=off`\n- **httrack**: Use `-s0`\n- **wpull**: Use `--no-robots`\n\n**When to override robots.txt (use with discretion)**:\n\nOnly bypass `robots.txt` when:\n\n- You have explicit permission from the website owner\n- You're crawling your own website\n- The content is publicly accessible and your crawling won't cause server issues\n- You're conducting authorized security testing\n\nRemember that bypassing `robots.txt` without legitimate reason may:\n\n- Violate terms of service\n- Lead to IP banning\n- Result in legal consequences in some jurisdictions\n- Cause reputation damage to your organization\n\nAlways use the minimum necessary crawling speed and scope, and consider contacting website administrators for permission when in doubt.\n"
}