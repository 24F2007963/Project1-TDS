{
  "source": "tools-in-data-science-public\\llm-text-extraction.md",
  "type": "course",
  "text": "## LLM Text Extraction\n\n[JSON](json.md) is one of the most widely used formats in the world for applications to exchange data.\n\n[![LLM Extraction](https://i.ytimg.com/vi_webp/72514uGffPE/sddefault.webp)](https://youtu.be/72514uGffPE)\n\nThis video explains how to use LLMs to extract structure from unstructured data, covering:\n\n- **LLM for Data Extraction**: Use OpenAI's API to extract structured information from unstructured data like addresses.\n- **JSON Schema**: Define a JSON schema to ensure consistent and structured output from the LLM.\n- **Prompt Engineering**: Craft effective prompts to guide the LLM's response and improve accuracy.\n- **Data Cleaning**: Use string functions and OpenAI's API to clean and standardize data.\n- **Data Analysis**: Analyze extracted data using Pandas to gain insights.\n- **LLM Limitations**: Understand the limitations of LLMs, including potential errors and inconsistencies in output.\n- **Production Use Cases**: Explore real-world applications of LLMs for data extraction, such as customer service email analysis.\n\nHere are the links used in the video:\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/1Z8mG-RPTSYY4qwkoNdzRTc4StbnwOXeE)\n- [JSON Schema](https://json-schema.org/)\n- [Function calling](https://platform.openai.com/docs/guides/function-calling)\n\nStructured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied\n[JSON Schema](https://json-schema.org/overview/what-is-jsonschema), so you don't need to worry about the model omitting a required key,\nor hallucinating an invalid enum value.\n\n```bash\ncurl https://api.openai.com/v1/chat/completions \\\n-H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"messages\": [\n    { \"role\": \"system\", \"content\": \"You are a helpful math tutor. Guide the user through the solution step by step.\" },\n    { \"role\": \"user\", \"content\": \"how can I solve 8x + 7 = -23\" }\n  ],\n  \"response_format\": {\n    \"type\": \"json_schema\",\n    \"json_schema\": {\n      \"name\": \"math_response\",\n      \"strict\": true\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"steps\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": { \"explanation\": { \"type\": \"string\" }, \"output\": { \"type\": \"string\" } },\n              \"required\": [\"explanation\", \"output\"],\n              \"additionalProperties\": false\n            }\n          },\n          \"final_answer\": { \"type\": \"string\" }\n        },\n        \"required\": [\"steps\", \"final_answer\"],\n        \"additionalProperties\": false\n      }\n    }\n  }\n}'\n```\n\nHere's what the `response_format` tells OpenAI. The items marked \u26a0\ufe0f are OpenAI specific requirements for the JSON schema.\n\n- `\"type\": \"json_schema\"`: We want you to generate a JSON response that follows this schema.\n- `\"json_schema\":`: We're going to give you a schema.\n  - `\"name\": \"math_response\"`: The schema is called `math_response`. (We can call it anything.)\n  - `\"strict\": true`: Follow the schema exactly.\n  - `\"schema\":`: Now, here's the actual JSON schema.\n    - `\"type\": \"object\"`: Return an object. \u26a0\ufe0f The root object **must** be an object.\n    - `\"properties\":`: The object has these properties:\n      - `\"steps\":`: There's a `steps` property.\n        - `\"type\": \"array\"`: It's an array.\n        - `\"items\":`: Each item in the array...\n          - `\"type\": \"object\"`: ... is an object.\n          - `\"properties\":`: The object has these properties:\n            - `\"explanation\":`: There's an `explanation` property.\n              - `\"type\": \"string\"`: ... which is a string.\n            - `\"output\":`: There's an `output` property.\n              - `\"type\": \"string\"`: ... which is a string, too.\n          - `\"required\": [\"explanation\", \"output\"]`: \u26a0\ufe0f You **must** add `\"required\": [...]` and include **all** fields int he object.\n          - `\"additionalProperties\": false`: \u26a0\ufe0f OpenAI requires every object to have `\"additionalProperties\": false`.\n      - `\"final_answer\":`: There's a `final_answer` property.\n        - `\"type\": \"string\"`: ... which is a string.\n    - `\"required\": [\"steps\", \"final_answer\"]`: \u26a0\ufe0f You **must** add `\"required\": [...]` and include **all** fields in the object.\n    - `\"additionalProperties\": false`: \u26a0\ufe0f OpenAI requires every object to have `\"additionalProperties\": false`.\n"
}